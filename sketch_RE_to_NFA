Find all Parentheses and Brackets and evalaute them recursivly.

Start by smaller ones first.

((((a | b) | c) | d) | k)

a | b

Then Quantifiers like * and +

o*p*l*((((a | b) | c)* | d+)+ | k | (((a | b) | c)* | d+)) 
o*p*l*(((   h    | c)* | d+)+ | k | (((a | b) | c)* | d+)) 
o*p*l*((      g      * | d+)+ | k | (((a | b) | c)* | d+))   // state t = process("      g      * | d+")
o*p*l*(                    t+ | k | (((a | b) | c)* | d+)) 
o*p*l*() // state w = process("t+ | k | t+")
o*p*l*w 

State nfa = state;

// Finite State Machine

class State {
  id autogenerated
  hash<regulare_definition, State> outgoing_transitions;
}

class regulare_definition {
  allowed_chars
  set >> avaialle_chars = ['a', '1']
  boolean isEpsilion = false;

  boolean test (char x) {
    return x is in avaialle_chars;
  }
}
